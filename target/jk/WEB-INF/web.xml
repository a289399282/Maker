<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" metadata-complete="true">
    <display-name>Archetype Created Web Application</display-name>

    <!-- 全站参数配置 -->
    <context-param>
        <description>全站编码配置</description>
        <param-name>encode</param-name>
        <param-value>utf-8</param-value>
    </context-param>

    <!-- 过滤器配置开始 -->
    <filter>
        <description>全站乱码过滤器</description>
        <filter-name>EncodeFilter</filter-name>
        <filter-class>com.gdpi.maker.filter.EncodeFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>EncodeFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter>
        <description>自动登陆过滤器</description>
        <filter-name>AutologinFilter</filter-name>
        <filter-class>com.gdpi.maker.filter.AutologinFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>AutologinFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter>
        <description>权限过滤器</description>
        <filter-name>PrivilegeFilter</filter-name>
        <filter-class>com.gdpi.maker.filter.PrivilegeFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>PrivilegeFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 过滤器配置结束 -->

    <!-- 加载spring容器，也可以使用前端控制器进行批量配置注入spring容器，然后这步就可以省略 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:/spring/applicationContext-*.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- springmvc前端控制器 -->
    <servlet>
        <servlet-name>springmvc_rest</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等）
            如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml）
         -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/springmvc-mvc.xml</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc_rest</servlet-name>

        <!-- 第一种：*.action，访问以.action结尾 由DispatcherServlet进行解析
        第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析
        使用此种方式可以实现 RESTful风格的url
        第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，
        仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。 -->

        <!-- <url-pattern>*.action</url-pattern> -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- session超时（失效）的时间,单位分钟 -->
    <session-config>
        <session-timeout>60</session-timeout>
    </session-config>

    <!-- post乱码过虑器 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
